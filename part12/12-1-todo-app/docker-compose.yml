version: '3.8'

services:
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - frontend
      - backend
  frontend:
    image: todo-frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    volumes:
      - ./frontend/:/usr/src/app
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:5001/
    ports:
      - 3000:3000
  backend:
    image: todo-backend
    build:
      context: ./backend/
      dockerfile: Dockerfile
    volumes:
      - ./backend/:/usr/src/app
    ports:
      - 5001:5001
    depends_on:
      - 'mongo'
      - 'redis'
    environment:
      - REDIS_URL=redis://redis:6379
      # - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
      - MONGO_URL=${MONGO_URL_CONTAINER}
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    restart: always
  redis:
    image: redis
    ports:
      - 6379:6379
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - ./backend/redis_data:/data
# docker-compose up
# docker-compose up -d              run in background
# docker-compose down --volumes     to ensure that nothing is left and start from a clean slate

# docker-compose --env-file ./backend/.env up
# docker-compose --env-file ./backend/.env config
# docker exec -it reverse-proxy bash
# curl http://app:3000
